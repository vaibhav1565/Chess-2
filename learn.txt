animationDuration 300

areArrowsAllowed false

arePremovesAllowed true?

boardOrientation 'white' 'black'

boardWidth 560

customBoardStyle 	object: {}
customDarkSquareStyle 	object: { backgroundColor: '#B58863' }
customDropSquareStyle 	object: { boxShadow: 'inset 0 0 1px 6px rgba(255,255,255,0.75)' }
customLightSquareStyle 	object: { backgroundColor: '#F0D9B5' }

customPremoveDarkSquareStyle
customPremoveLightSquareStyle

customSquareStyles 	object: {}

isDraggablePiece 	function: ({ piece, sourceSquare }) => true 	returns [true, false] Function called when a piece drag is attempted. Returns if piece is draggable.

getPositionObject 	function: (currentPosition) => {} 		User function that receives current position object when position changes.

onPieceDrop 	function: (sourceSquare, targetSquare, piece) => true 	returns [true, false] 	User function that is run when piece is dropped on a square. Must return whether the move was successful or not. This return value does not control whether or not the piece was placed (as that is controlled by the position prop) but instead controls premove logic.

################################################################
UCI protocol
Universal Chess Interface

The engine should boot and wait for input from the GUI, the engine should wait for the 
isready or setoption
command to set up its internal parameters as the boot process should be as quick as possible.

all command strings the engine receives will end with \n, also all commands the GUI receives should end with \n

The engine will always be in forced mode which means it should never start calculating or pondering without receiving a go command first.

Before the engine is asked to search on a position, there will always be a position command to tell the engine about the current position.

by default all the opening book handling is done by the GUI, but there is an option for the engine to use its own book (OwnBook option, see below)

Move format
The move format is in long algebraic notation.
A nullmove from the Engine to the GUI should be sent as 0000.

GUI TO ENGINE
These are all the command the engine gets from the interface.

uci
- tell engine to use the uci (universal chess interface), this will be sent once as a first command after program boot to tell the engine to switch to uci mode.
- After receiving the uci command the engine must identify itself with the id command and send the option commands to tell the GUI which engine settings the engine supports if any.
- After that the engine should send uciok to acknowledge the uci mode. If no uciok is sent within a certain time period, the engine task will be killed by the GUI.

debug [ on | off ]
- switch the debug mode of the engine on and off. In debug mode the engine should send additional infos to the GUI, e.g. with the info string command, to help debugging, e.g. the commands that the engine has received etc.
- This mode should be switched off by default and this command can be sent any time, also when the engine is thinking.

isready
- this is used to synchronize the engine with the GUI. When the GUI has sent a command or multiple commands that can take some time to complete, this command can be used to wait for the engine to be ready again or to ping the engine to find out if it is still alive. E.g. this should be sent after setting the path to the tablebases as this can take some time.
- This command is also required once before the engine is asked to do any search to wait for the engine to finish initializing.
- This command must always be answered with readyok and can be sent also when the engine is calculating in which case the engine should also immediately answer with readyok without stopping the search.

ucinewgame
- this is sent to the engine when the next search (started with position and go) will be from a different game. This can be a new game the engine should play or a new game it should analyse but also the next position from a testsuite with positions only.
- If the GUI hasn't sent a ucinewgame before the first position command, the engine shouldn't expect any further ucinewgame commands as the GUI is probably not supporting the ucinewgame command. So the engine should not rely on this command even though all new GUIs should support it.
- As the engine's reaction to ucinewgame can take some time the GUI should always send isready after ucinewgame to wait for the engine to finish its operation.

position [ fen fenstring | startpos ] moves move1 ... movei
- set up the position described in fenstring on the internal board and play the moves on the internal chess board.
- if the game was played from the start position the string startpos will be sent
- Note: no "new" command is needed. However, if this position is from a different game than the last position sent to the engine, the GUI should have sent a ucinewgame inbetween.

go
start calculating on the current position set up with the position command.
There are a number of commands that can follow this command, all will be sent in the same string. If one command is not sent its value should be interpreted as it would not influence the search.
- movetime <x>
    search exactly x mseconds
- infinite
    search until the stop command. Do not exit the search without being told so in this mode!

stop
stop calculating as soon as possible,
don't forget the bestmove and possibly the ponder token when finishing the search

quit
quit the program as soon as possible

###
ENGINE TO GUI

id
    name <x>
    this must be sent after receiving the uci command to identify the engine, e.g. id name Shredder X.Y\n

    author <x>
    this must be sent after receiving the uci command to identify the engine, e.g. id author Stefan MK\n

uciok
    Must be sent after the id and optional options to tell the GUI that the engine has sent all infos and is ready in uci mode.

readyok
    This must be sent when the engine has received an isready command and has processed all input and is ready to accept new commands now.

bestmove move1 [ ponder move2 ]